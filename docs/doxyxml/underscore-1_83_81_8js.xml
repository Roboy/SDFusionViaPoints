<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="underscore-1_83_81_8js" kind="file" language="Javascript">
    <compoundname>underscore-1.3.1.js</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ac4ee9238a9f0078b4be85227c01dbeac" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var previousUnderscore</definition>
        <argsstring></argsstring>
        <name>previousUnderscore</name>
        <initializer>= root._</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="18" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ad663570d75bb027086f4cacd616c9009" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var breaker</definition>
        <argsstring></argsstring>
        <name>breaker</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="21" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a7771403b2eeb76d6b9bb9f814a90063f" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var ArrayProto</definition>
        <argsstring></argsstring>
        <name>ArrayProto</name>
        <initializer>= Array.prototype</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="24" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ae7a0faeae3a5264c4a465adec245970c" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var ObjProto</definition>
        <argsstring></argsstring>
        <name>ObjProto</name>
        <initializer>= Object.prototype</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="24" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aacb937b5ac017268e4ccc88ea768f80d" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var FuncProto</definition>
        <argsstring></argsstring>
        <name>FuncProto</name>
        <initializer>= Function.prototype</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="24" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1acab0c09ac73e7a3c85a21fa773e9b8b0" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var slice</definition>
        <argsstring></argsstring>
        <name>slice</name>
        <initializer>= ArrayProto.slice</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="27" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1af3234f95837335d8b87eb137a93c40f4" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var unshift</definition>
        <argsstring></argsstring>
        <name>unshift</name>
        <initializer>= ArrayProto.unshift</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="28" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a7c9b2c6889147a97101a5409709b8d91" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var toString</definition>
        <argsstring></argsstring>
        <name>toString</name>
        <initializer>= ObjProto.toString</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="29" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a70e9fba663e9e2e297e34ddce97d6fb7" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var hasOwnProperty</definition>
        <argsstring></argsstring>
        <name>hasOwnProperty</name>
        <initializer>= ObjProto.hasOwnProperty</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="30" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aaea30bb8bc2c2435088e2b8945fd4e8d" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeForEach</definition>
        <argsstring></argsstring>
        <name>nativeForEach</name>
        <initializer>= ArrayProto.forEach</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="35" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9d891243eccb0030966fddf03656c7bc" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeMap</definition>
        <argsstring></argsstring>
        <name>nativeMap</name>
        <initializer>= ArrayProto.map</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="36" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a1610b11d7293d42a080690299ab5590c" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeReduce</definition>
        <argsstring></argsstring>
        <name>nativeReduce</name>
        <initializer>= ArrayProto.reduce</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="37" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9eb9860f812c5b3797bcc7a7a9526e1c" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeReduceRight</definition>
        <argsstring></argsstring>
        <name>nativeReduceRight</name>
        <initializer>= ArrayProto.reduceRight</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="38" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a89e32a2df870d1a5e5a156273adb2cf5" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeFilter</definition>
        <argsstring></argsstring>
        <name>nativeFilter</name>
        <initializer>= ArrayProto.filter</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="39" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a06d7cf981003dedeb6a418ef9718b2f9" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeEvery</definition>
        <argsstring></argsstring>
        <name>nativeEvery</name>
        <initializer>= ArrayProto.every</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="40" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9ecd1b517ea6f25192be2d5a5738a63e" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeSome</definition>
        <argsstring></argsstring>
        <name>nativeSome</name>
        <initializer>= ArrayProto.some</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="41" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a6d398feccea3cd19525fa8e68108b089" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeIndexOf</definition>
        <argsstring></argsstring>
        <name>nativeIndexOf</name>
        <initializer>= ArrayProto.indexOf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="42" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aede057dd800f1fc739c51cbe078983b4" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeLastIndexOf</definition>
        <argsstring></argsstring>
        <name>nativeLastIndexOf</name>
        <initializer>= ArrayProto.lastIndexOf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="43" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a8573940a68cd17cc2c7fe76a899f41f1" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeIsArray</definition>
        <argsstring></argsstring>
        <name>nativeIsArray</name>
        <initializer>= Array.isArray</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="44" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a25a5a96b1564daf3e5a1567cc9d50194" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeKeys</definition>
        <argsstring></argsstring>
        <name>nativeKeys</name>
        <initializer>= Object.keys</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="45" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ae01123a1f1b78c4c444d27dbe541838b" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var nativeBind</definition>
        <argsstring></argsstring>
        <name>nativeBind</name>
        <initializer>= FuncProto.bind</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="46" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a18f05aeddc212b523b40818fa2b87b33" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>_</definition>
        <argsstring></argsstring>
        <name>_</name>
        <initializer>= function(obj) { return new wrapper(obj); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="49" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a0544c3fe466e421738dae463968b70ba" prot="public" static="no" mutable="no">
        <type></type>
        <definition>else</definition>
        <argsstring></argsstring>
        <name>else</name>
        <initializer>{
    root[&apos;_&apos;] = _</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="60" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a80748eac516086ff84a694930891f27e" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ VERSION</definition>
        <argsstring></argsstring>
        <name>VERSION</name>
        <initializer>= &apos;1.3.1&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="65" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a3f447cf94ea7065199f5478b6b8da4fa" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>each</definition>
        <argsstring></argsstring>
        <name>each</name>
        <initializer>= _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach &amp;&amp; obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i &lt; l; i++) {
        if (i in obj &amp;&amp; iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="73" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aae6e2d65f60258ec245858717ddf9b46" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ map</definition>
        <argsstring></argsstring>
        <name>map</name>
        <initializer>= _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap &amp;&amp; obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    if (obj.length === +obj.length) results.length = obj.length;
    return results;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="92" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a3234e1d5312674f08a717da2d5a6e107" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ reduce</definition>
        <argsstring></argsstring>
        <name>reduce</name>
        <initializer>= _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length &gt; 2;
    if (obj == null) obj = [];
    if (nativeReduce &amp;&amp; obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(&apos;Reduce of empty array with no initial value&apos;);
    return memo;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="105" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aaf09e7034c08f1f30982620f040cf615" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ reduceRight</definition>
        <argsstring></argsstring>
        <name>reduceRight</name>
        <initializer>= _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length &gt; 2;
    if (obj == null) obj = [];
    if (nativeReduceRight &amp;&amp; obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var reversed = _.toArray(obj).reverse();
    if (context &amp;&amp; !initial) iterator = _.bind(iterator, context);
    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="126" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a4957e2b98ec6805f2c13ec19585ae8f2" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ find</definition>
        <argsstring></argsstring>
        <name>find</name>
        <initializer>= _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="139" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9665ae20141ca5f25624624a8a5f924f" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ filter</definition>
        <argsstring></argsstring>
        <name>filter</name>
        <initializer>= _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter &amp;&amp; obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="153" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a82fc0e74268507dd216be274ed34b78d" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ reject</definition>
        <argsstring></argsstring>
        <name>reject</name>
        <initializer>= function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="164" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1adf02232d126de68eafb76e4c597cc113" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ every</definition>
        <argsstring></argsstring>
        <name>every</name>
        <initializer>= _.all = function(obj, iterator, context) {
    var result = true;
    if (obj == null) return result;
    if (nativeEvery &amp;&amp; obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result &amp;&amp; iterator.call(context, value, index, list))) return breaker;
    });
    return result;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="176" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ae1f9caefe8e9145b066bda5bc58d0335" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var any</definition>
        <argsstring></argsstring>
        <name>any</name>
        <initializer>= _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome &amp;&amp; obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="189" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a344b0a19a53a83cbec655b0845f42fb0" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ include</definition>
        <argsstring></argsstring>
        <name>include</name>
        <initializer>= _.contains = function(obj, target) {
    var found = false;
    if (obj == null) return found;
    if (nativeIndexOf &amp;&amp; obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="202" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a74e6e4e2c82dd065383bb68cafdbe134" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ invoke</definition>
        <argsstring></argsstring>
        <name>invoke</name>
        <initializer>= function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
    });
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="213" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ae89763ae496680428172e23b31c151eb" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ pluck</definition>
        <argsstring></argsstring>
        <name>pluck</name>
        <initializer>= function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="221" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aadcbd50c03a050e3191ff887e83eb149" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ max</definition>
        <argsstring></argsstring>
        <name>max</name>
        <initializer>= function(obj, iterator, context) {
    if (!iterator &amp;&amp; _.isArray(obj)) return Math.max.apply(Math, obj);
    if (!iterator &amp;&amp; _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed &gt;= result.computed &amp;&amp; (result = {value : value, computed : computed});
    });
    return result.value;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="226" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1afeb10e21f5913cbfa5aea8ab6c1b3872" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ min</definition>
        <argsstring></argsstring>
        <name>min</name>
        <initializer>= function(obj, iterator, context) {
    if (!iterator &amp;&amp; _.isArray(obj)) return Math.min.apply(Math, obj);
    if (!iterator &amp;&amp; _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed &lt; result.computed &amp;&amp; (result = {value : value, computed : computed});
    });
    return result.value;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="238" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2e20ef3489b46881d491f76935f2e8c2" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ shuffle</definition>
        <argsstring></argsstring>
        <name>shuffle</name>
        <initializer>= function(obj) {
    var shuffled = [], rand;
    each(obj, function(value, index, list) {
      if (index == 0) {
        shuffled[0] = value;
      } else {
        rand = Math.floor(Math.random() * (index + 1));
        shuffled[index] = shuffled[rand];
        shuffled[rand] = value;
      }
    });
    return shuffled;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="250" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a1182ea70a4c3f49bd8ada0145e485d82" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ sortBy</definition>
        <argsstring></argsstring>
        <name>sortBy</name>
        <initializer>= function(obj, iterator, context) {
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a &lt; b ? -1 : a &gt; b ? 1 : 0;
    }), &apos;value&apos;);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="265" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aad90c8f99e5c26166a03cfd81a1d5165" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ groupBy</definition>
        <argsstring></argsstring>
        <name>groupBy</name>
        <initializer>= function(obj, val) {
    var result = {};
    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
    each(obj, function(value, index) {
      var key = iterator(value, index);
      (result[key] || (result[key] = [])).push(value);
    });
    return result;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="279" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1adf35e5190b4dff8e61f158aaf1c192ee" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ sortedIndex</definition>
        <argsstring></argsstring>
        <name>sortedIndex</name>
        <initializer>= function(array, obj, iterator) {
    iterator || (iterator = _.identity);
    var low = 0, high = array.length;
    while (low &lt; high) {
      var mid = (low + high) &gt;&gt; 1;
      iterator(array[mid]) &lt; iterator(obj) ? low = mid + 1 : high = mid;
    }
    return low;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="291" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ad4db7f070bb624c4ef5c51974127e600" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ toArray</definition>
        <argsstring></argsstring>
        <name>toArray</name>
        <initializer>= function(iterable) {
    if (!iterable)                return [];
    if (iterable.toArray)         return iterable.toArray();
    if (_.isArray(iterable))      return slice.call(iterable);
    if (_.isArguments(iterable))  return slice.call(iterable);
    return _.values(iterable);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="302" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aeec8c481493b1012f774b051041ffc5f" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <initializer>= function(obj) {
    return _.toArray(obj).length;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="311" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a78ce12cf806b2e8976afa37df13879a9" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ first</definition>
        <argsstring></argsstring>
        <name>first</name>
        <initializer>= _.head = function(array, n, guard) {
    return (n != null) &amp;&amp; !guard ? slice.call(array, 0, n) : array[0];
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="321" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aaf733ce193ed39fb96edc098dc74854f" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ initial</definition>
        <argsstring></argsstring>
        <name>initial</name>
        <initializer>= function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="329" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aaaf16dd08440d024b24372c1ed2cfc24" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ last</definition>
        <argsstring></argsstring>
        <name>last</name>
        <initializer>= function(array, n, guard) {
    if ((n != null) &amp;&amp; !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="335" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ad21093ac411b9d0f8d1b1960b266d126" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ rest</definition>
        <argsstring></argsstring>
        <name>rest</name>
        <initializer>= _.tail = function(array, index, guard) {
    return slice.call(array, (index == null) || guard ? 1 : index);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="347" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a3b04c04f46eb8f5c6690b8a26f78f4d5" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ compact</definition>
        <argsstring></argsstring>
        <name>compact</name>
        <initializer>= function(array) {
    return _.filter(array, function(value){ return !!value; });
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="352" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a1caf06506fc66a58758df0c734dea317" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ flatten</definition>
        <argsstring></argsstring>
        <name>flatten</name>
        <initializer>= function(array, shallow) {
    return _.reduce(array, function(memo, value) {
      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
      memo[memo.length] = value;
      return memo;
    }, []);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="357" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ad057acae26a159d3affae09749af6a8f" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ without</definition>
        <argsstring></argsstring>
        <name>without</name>
        <initializer>= function(array) {
    return _.difference(array, slice.call(arguments, 1));
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="366" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ab71b7fa5fae34f8c49bcbadd01097811" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ uniq</definition>
        <argsstring></argsstring>
        <name>uniq</name>
        <initializer>= _.unique = function(array, isSorted, iterator) {
    var initial = iterator ? _.map(array, iterator) : array;
    var result = [];
    _.reduce(initial, function(memo, el, i) {
      if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) {
        memo[memo.length] = el;
        result[result.length] = array[i];
      }
      return memo;
    }, []);
    return result;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="373" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a1c5fc54fd8b13c85b7e0c8e58d29cfd1" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ intersection</definition>
        <argsstring></argsstring>
        <name>intersection</name>
        <initializer>= _.intersect = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) &gt;= 0;
      });
    });
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="394" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9bc8a7c9330a5be0ca6432d080320d51" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ difference</definition>
        <argsstring></argsstring>
        <name>difference</name>
        <initializer>= function(array) {
    var rest = _.flatten(slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.include(rest, value); });
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="405" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a49ef5cda12483fa3207f2171ac18ebbd" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ zip</definition>
        <argsstring></argsstring>
        <name>zip</name>
        <initializer>= function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, &apos;length&apos;));
    var results = new Array(length);
    for (var i = 0; i &lt; length; i++) results[i] = _.pluck(args, &quot;&quot; + i);
    return results;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="412" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a64b6529e6dc1f36995b9369a92122bf1" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ indexOf</definition>
        <argsstring></argsstring>
        <name>indexOf</name>
        <initializer>= function(array, item, isSorted) {
    if (array == null) return -1;
    var i, l;
    if (isSorted) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (nativeIndexOf &amp;&amp; array.indexOf === nativeIndexOf) return array.indexOf(item);
    for (i = 0, l = array.length; i &lt; l; i++) if (i in array &amp;&amp; array[i] === item) return i;
    return -1;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="426" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a4ea24c0a3e27634d915b474bc3e3f7e2" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ lastIndexOf</definition>
        <argsstring></argsstring>
        <name>lastIndexOf</name>
        <initializer>= function(array, item) {
    if (array == null) return -1;
    if (nativeLastIndexOf &amp;&amp; array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
    var i = array.length;
    while (i--) if (i in array &amp;&amp; array[i] === item) return i;
    return -1;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="439" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ac3d135458fca2ce11eb9f9572b45ba0a" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ range</definition>
        <argsstring></argsstring>
        <name>range</name>
        <initializer>= function(start, stop, step) {
    if (arguments.length &lt;= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx &lt; len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="450" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1af062a408e401f1073343dfb080e3c432" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var ctor</definition>
        <argsstring></argsstring>
        <name>ctor</name>
        <initializer>= function(){}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="473" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2c44aca94a59c8ddfbddcc65f47cfdaf" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ bind</definition>
        <argsstring></argsstring>
        <name>bind</name>
        <initializer>= function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind &amp;&amp; nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="479" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ac895ccd01e362754a40661e15184fad1" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ bindAll</definition>
        <argsstring></argsstring>
        <name>bindAll</name>
        <initializer>= function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="496" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a6d85fa9889e668020e71aa4ec70aeaec" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ memoize</definition>
        <argsstring></argsstring>
        <name>memoize</name>
        <initializer>= function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="504" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1afb1e45ceba0261ec005d6e2a35dd7057" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ delay</definition>
        <argsstring></argsstring>
        <name>delay</name>
        <initializer>= function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(func, args); }, wait);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="515" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9e6b40911b546ac9db94fba940172e05" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ defer</definition>
        <argsstring></argsstring>
        <name>defer</name>
        <initializer>= function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="522" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ac6b6cf874be89a118d84321eca6ac6fa" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ throttle</definition>
        <argsstring></argsstring>
        <name>throttle</name>
        <initializer>= function(func, wait) {
    var context, args, timeout, throttling, more;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) func.apply(context, args);
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        func.apply(context, args);
      }
      whenDone();
      throttling = true;
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="528" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1af8b58edef98f4bc39a74918d9bedb626" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ debounce</definition>
        <argsstring></argsstring>
        <name>debounce</name>
        <initializer>= function(func, wait) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        func.apply(context, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="552" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a9d2ebdd2fcfcff6fa010405fc8eee6db" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ once</definition>
        <argsstring></argsstring>
        <name>once</name>
        <initializer>= function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      return memo = func.apply(this, arguments);
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="567" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ad69ea3d07a93bca6e36d1367fe02fded" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ wrap</definition>
        <argsstring></argsstring>
        <name>wrap</name>
        <initializer>= function(func, wrapper) {
    return function() {
      var args = [func].concat(slice.call(arguments, 0));
      return wrapper.apply(this, args);
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="579" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aa6512a33f654cc8168ba207dd32af085" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ compose</definition>
        <argsstring></argsstring>
        <name>compose</name>
        <initializer>= function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i &gt;= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="588" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ab538403afe2783a5807fc34b6a15a8db" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ after</definition>
        <argsstring></argsstring>
        <name>after</name>
        <initializer>= function(times, func) {
    if (times &lt;= 0) return func();
    return function() {
      if (--times &lt; 1) { return func.apply(this, arguments); }
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="600" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aebf14c79bb86b80e2e5780ed8c90a9ff" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ keys</definition>
        <argsstring></argsstring>
        <name>keys</name>
        <initializer>= nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError(&apos;Invalid object&apos;);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="612" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a737f21e4c60bc9581c78c0f2ae0c43a7" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ values</definition>
        <argsstring></argsstring>
        <name>values</name>
        <initializer>= function(obj) {
    return _.map(obj, _.identity);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="620" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a8580f844fa8ccf7f04019d5a25701a4c" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <initializer>= _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="626" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aa9d0c9eafdc0fc90cd58f3716443c2fa" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ extend</definition>
        <argsstring></argsstring>
        <name>extend</name>
        <initializer>= function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="635" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ade94b44b6094537981a6bcb94ebc2803" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ defaults</definition>
        <argsstring></argsstring>
        <name>defaults</name>
        <initializer>= function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="645" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2525e448d09d4b59ac33df3a1ddcadfe" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ clone</definition>
        <argsstring></argsstring>
        <name>clone</name>
        <initializer>= function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="655" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a14cacd2a850023dc360858d2de8bb407" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ tap</definition>
        <argsstring></argsstring>
        <name>tap</name>
        <initializer>= function(obj, interceptor) {
    interceptor(obj);
    return obj;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="663" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a96b32d7bca28e1923a620f93b86dc9a0" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isEqual</definition>
        <argsstring></argsstring>
        <name>isEqual</name>
        <initializer>= function(a, b) {
    return eq(a, b, []);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="757" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2066a7b7b922098c23aeb639c27af7ff" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isEmpty</definition>
        <argsstring></argsstring>
        <name>isEmpty</name>
        <initializer>= function(obj) {
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="763" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a67a4bf51c1d46a1da721b842965bada8" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isElement</definition>
        <argsstring></argsstring>
        <name>isElement</name>
        <initializer>= function(obj) {
    return !!(obj &amp;&amp; obj.nodeType == 1);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="770" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a5de66dae5a8811676ef96c1ddde4ba74" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isArray</definition>
        <argsstring></argsstring>
        <name>isArray</name>
        <initializer>= nativeIsArray || function(obj) {
    return toString.call(obj) == &apos;[object Array]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="776" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ab9766fc3d9444da3d1972efca6075831" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isObject</definition>
        <argsstring></argsstring>
        <name>isObject</name>
        <initializer>= function(obj) {
    return obj === Object(obj);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="781" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a88bdd20b1b492cdc3fd4aca00539c952" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isArguments</definition>
        <argsstring></argsstring>
        <name>isArguments</name>
        <initializer>= function(obj) {
    return toString.call(obj) == &apos;[object Arguments]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="786" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a123d64473ac8d3b023d16da650aff47d" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isFunction</definition>
        <argsstring></argsstring>
        <name>isFunction</name>
        <initializer>= function(obj) {
    return toString.call(obj) == &apos;[object Function]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="796" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="796" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a28cf26658bc1de59e0f50cfca57c06cd" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isString</definition>
        <argsstring></argsstring>
        <name>isString</name>
        <initializer>= function(obj) {
    return toString.call(obj) == &apos;[object String]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="801" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a41d7bbc8f6bbe2fb700bb2e4f5e30d54" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isNumber</definition>
        <argsstring></argsstring>
        <name>isNumber</name>
        <initializer>= function(obj) {
    return toString.call(obj) == &apos;[object Number]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="806" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2278019a00ade98e0829bbf8a2fb1a4e" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isNaN</definition>
        <argsstring></argsstring>
        <name>isNaN</name>
        <initializer>= function(obj) {
    
    return obj !== obj;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="811" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ad3602ee0f1a606ecb61ce7caf896c607" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isBoolean</definition>
        <argsstring></argsstring>
        <name>isBoolean</name>
        <initializer>= function(obj) {
    return obj === true || obj === false || toString.call(obj) == &apos;[object Boolean]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="817" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ac9c60b0dd22ddcf077a8ec82485eabfe" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isDate</definition>
        <argsstring></argsstring>
        <name>isDate</name>
        <initializer>= function(obj) {
    return toString.call(obj) == &apos;[object Date]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="822" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a4e3f0da6c4c55d249266cea76fc88992" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isRegExp</definition>
        <argsstring></argsstring>
        <name>isRegExp</name>
        <initializer>= function(obj) {
    return toString.call(obj) == &apos;[object RegExp]&apos;;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="827" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1af0e08ac627eff58ea3f70e757a5a6bae" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isNull</definition>
        <argsstring></argsstring>
        <name>isNull</name>
        <initializer>= function(obj) {
    return obj === null;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="832" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a7bc78060a0963bc88cb994ab3e771399" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ isUndefined</definition>
        <argsstring></argsstring>
        <name>isUndefined</name>
        <initializer>= function(obj) {
    return obj === void 0;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="837" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a5d535d24a5a6f16ce886bdbd17c9f5a3" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ has</definition>
        <argsstring></argsstring>
        <name>has</name>
        <initializer>= function(obj, key) {
    return hasOwnProperty.call(obj, key);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="842" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ab8bae1dc0b781a993f209df583e589b1" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ noConflict</definition>
        <argsstring></argsstring>
        <name>noConflict</name>
        <initializer>= function() {
    root._ = previousUnderscore;
    return this;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="851" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2d01c28bb1e18f7c5ad4762f5b6ff4f8" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ identity</definition>
        <argsstring></argsstring>
        <name>identity</name>
        <initializer>= function(value) {
    return value;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="857" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a90f483774ece56742cfa1b5d47eeea5a" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ times</definition>
        <argsstring></argsstring>
        <name>times</name>
        <initializer>= function (n, iterator, context) {
    for (var i = 0; i &lt; n; i++) iterator.call(context, i);
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="862" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a2a54ac33a705a715efef6da0611a514a" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ escape</definition>
        <argsstring></argsstring>
        <name>escape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="867" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a1ba8e806628b2f512d93819d64d86db9" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var func</definition>
        <argsstring></argsstring>
        <name>func</name>
        <initializer>= new Function(&apos;obj&apos;, &apos;_&apos;, tmpl)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="928" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aaec231834b23a5a94d85f40015eef10d" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>wrapper prototype chain</definition>
        <argsstring></argsstring>
        <name>chain</name>
        <initializer>= function(obj) {
    return _(obj).chain();
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="936" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1aacc7a3ce8bf094e0f0f9d9a5bdf059fc" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var wrapper</definition>
        <argsstring></argsstring>
        <name>wrapper</name>
        <initializer>= function(obj) { this._wrapped = obj; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="946" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1ab8a0e9015e232b6dcd9ad787190df4a1" prot="public" static="no" mutable="no">
        <type>_</type>
        <definition>_ prototype</definition>
        <argsstring></argsstring>
        <name>prototype</name>
        <initializer>= wrapper.prototype</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="949" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a87dff6ed0b5ef2cf5d335a83bf0b8219" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var result</definition>
        <argsstring></argsstring>
        <name>result</name>
        <initializer>= function(obj, chain) {
    return chain ? _(obj).chain() : obj;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="952" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="952" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a6dd27b3e2362040fcf09b7e9a0d2121e" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var addToWrapper</definition>
        <argsstring></argsstring>
        <name>addToWrapper</name>
        <initializer>= function(name, func) {
    wrapper.prototype[name] = function() {
      var args = slice.call(arguments);
      unshift.call(args, this._wrapped);
      return result(func.apply(_, args), this._chain);
    };
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="957" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="957" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="underscore-1_83_81_8js_1a27665b35f86227fe53e578c3c5863d29" prot="public" static="no" mutable="no">
        <type>wrapper prototype</type>
        <definition>wrapper prototype value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= function() {
    return this._wrapped;
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="995" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="995" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="underscore-1_83_81_8js_1a778fccb9eadcf856f9a9159722bfe660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(typeof exports!== &apos;undefined&apos;)</argsstring>
        <name>if</name>
        <param>
          <type>typeof exports!</type>
          <defname>typeof exports!</defname>
          <defval>= &apos;undefined&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="55" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1addb1a19f028de99a5a2e172a7e7b2b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_ union</type>
        <definition>_ union function</definition>
        <argsstring>()</argsstring>
        <name>function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="388" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="388" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1ab5f81734a565be6e6705278f29e0d5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function eq</definition>
        <argsstring>(a, b, stack)</argsstring>
        <name>eq</name>
        <param>
          <type>a</type>
          <defname>a</defname>
        </param>
        <param>
          <type>b</type>
          <defname>b</defname>
        </param>
        <param>
          <type>stack</type>
          <defname>stack</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="669" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="669" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1a3ba7370af6f0b7c95b498b32e903f636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>(!_.isArguments(arguments))</argsstring>
        <name>if</name>
        <param>
          <type>!_.</type>
          <declname>isArguments</declname>
          <array>arguments</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="789" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="789" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1ae07a4f5aa12edbb6d92bacd328174884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function return</definition>
        <argsstring>(data)</argsstring>
        <name>return</name>
        <param>
          <type>data</type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="930" column="1" bodyfile="build/html/_static/underscore-1.3.1.js" bodystart="930" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1ac7642c9b678d1867ae0432598ff54d51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>_</type>
        <definition>_ mixin</definition>
        <argsstring>(_)</argsstring>
        <name>mixin</name>
        <param>
          <type>_</type>
          <defname>_</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1a40dc7e83dc5e3198bb8e7eac68d859d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>each</definition>
        <argsstring>([&apos;pop&apos;, &apos;push&apos;, &apos;reverse&apos;, &apos;shift&apos;, &apos;sort&apos;, &apos;splice&apos;, &apos;unshift&apos;], function(name){var method=ArrayProto[name];wrapper.prototype[name]=function(){var wrapped=this._wrapped;method.apply(wrapped, arguments);var length=wrapped.length;if((name== &apos;shift&apos;||name== &apos;splice&apos;)&amp;&amp;length===0) delete wrapped[0];return result(wrapped, this._chain);};})</argsstring>
        <name>each</name>
        <param>
          <type>function(name){var method=ArrayProto[name];wrapper.prototype[name]=function(){var wrapped=this._wrapped;method.apply(wrapped, arguments);var length=wrapped.length;if((name== &apos;shift&apos;||name== &apos;splice&apos;)&amp;&amp;length===0) delete wrapped[0];return result(wrapped, this._chain);};}</type>
          <defname>function(name){var method=ArrayProto[name];wrapper.prototype[name]=function(){var wrapped=this._wrapped;method.apply(wrapped, arguments);var length=wrapped.length;if((name== &apos;shift&apos;||name== &apos;splice&apos;)&amp;&amp;length===0) delete wrapped[0];return result(wrapped, this._chain);};}</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="969" column="1"/>
      </memberdef>
      <memberdef kind="function" id="underscore-1_83_81_8js_1aafc46d047b4d7639fd2c4b927ec5048c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>call</definition>
        <argsstring>(this)</argsstring>
        <name>call</name>
        <param>
          <type>this</type>
          <defname>this</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="build/html/_static/underscore-1.3.1.js" line="999" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Underscore.js<sp/>1.3.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(c)<sp/>2009-2012<sp/>Jeremy<sp/>Ashkenas,<sp/>DocumentCloud<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Underscore<sp/>is<sp/>freely<sp/>distributable<sp/>under<sp/>the<sp/>MIT<sp/>license.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Portions<sp/>of<sp/>Underscore<sp/>are<sp/>inspired<sp/>or<sp/>borrowed<sp/>from<sp/>Prototype,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Oliver<sp/>Steele&apos;s<sp/>Functional,<sp/>and<sp/>John<sp/>Resig&apos;s<sp/>Micro-Templating.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>For<sp/>all<sp/>details<sp/>and<sp/>documentation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://documentcloud.github.com/underscore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">(</highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Baseline<sp/>setup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Establish<sp/>the<sp/>root<sp/>object,<sp/>`window`<sp/>in<sp/>the<sp/>browser,<sp/>or<sp/>`global`<sp/>on<sp/>the<sp/>server.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>var<sp/>root<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>previous<sp/>value<sp/>of<sp/>the<sp/>`_`<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>var<sp/>previousUnderscore<sp/>=<sp/>root._;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Establish<sp/>the<sp/>object<sp/>that<sp/>gets<sp/>returned<sp/>to<sp/>break<sp/>out<sp/>of<sp/>a<sp/>loop<sp/>iteration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>var<sp/>breaker<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>bytes<sp/>in<sp/>the<sp/>minified<sp/>(but<sp/>not<sp/>gzipped)<sp/>version:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>var<sp/>ArrayProto<sp/>=<sp/>Array.prototype,<sp/>ObjProto<sp/>=<sp/>Object.prototype,<sp/>FuncProto<sp/>=<sp/>Function.prototype;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>quick<sp/>reference<sp/>variables<sp/>for<sp/>speed<sp/>access<sp/>to<sp/>core<sp/>prototypes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>var<sp/>slice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.slice,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unshift<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.unshift,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toString<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ObjProto.toString,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hasOwnProperty<sp/><sp/><sp/>=<sp/>ObjProto.hasOwnProperty;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>**ECMAScript<sp/>5**<sp/>native<sp/>function<sp/>implementations<sp/>that<sp/>we<sp/>hope<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>declared<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>var</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeForEach<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.forEach,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeMap<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.map,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeReduce<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.reduce,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeReduceRight<sp/><sp/>=<sp/>ArrayProto.reduceRight,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeFilter<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.filter,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeEvery<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.every,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeSome<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.some,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeIndexOf<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ArrayProto.indexOf,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeLastIndexOf<sp/><sp/>=<sp/>ArrayProto.lastIndexOf,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeIsArray<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Array.isArray,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeKeys<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>Object.keys,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>nativeBind<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FuncProto.bind;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>safe<sp/>reference<sp/>to<sp/>the<sp/>Underscore<sp/>object<sp/>for<sp/>use<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>var<sp/>_<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>wrapper(obj);<sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Export<sp/>the<sp/>Underscore<sp/>object<sp/>for<sp/>**Node.js**,<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>backwards-compatibility<sp/>for<sp/>the<sp/>old<sp/>`require()`<sp/>API.<sp/>If<sp/>we&apos;re<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>browser,<sp/>add<sp/>`_`<sp/>as<sp/>a<sp/>global<sp/>object<sp/>via<sp/>a<sp/>string<sp/>identifier,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>Closure<sp/>Compiler<sp/>&quot;advanced&quot;<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeof<sp/>exports<sp/>!==<sp/></highlight><highlight class="stringliteral">&apos;undefined&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeof<sp/>module<sp/>!==<sp/></highlight><highlight class="stringliteral">&apos;undefined&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>module.exports)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exports<sp/>=<sp/>module.exports<sp/>=<sp/>_;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>exports._<sp/>=<sp/>_;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>root[</highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">]<sp/>=<sp/>_;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>_.VERSION<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;1.3.1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Collection<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>cornerstone,<sp/>an<sp/>`each`<sp/>implementation,<sp/>aka<sp/>`forEach`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>objects<sp/>with<sp/>the<sp/>built-in<sp/>`forEach`,<sp/>arrays,<sp/>and<sp/>raw<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`forEach`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>var<sp/>each<sp/>=<sp/>_.each<sp/>=<sp/>_.forEach<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeForEach<sp/>&amp;&amp;<sp/>obj.forEach<sp/>===<sp/>nativeForEach)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obj.forEach(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.length<sp/>===<sp/>+obj.length)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0,<sp/>l<sp/>=<sp/>obj.length;<sp/>i<sp/>&lt;<sp/>l;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>in<sp/>obj<sp/>&amp;&amp;<sp/>iterator.call(context,<sp/>obj[i],<sp/>i,<sp/>obj)<sp/>===<sp/>breaker)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>key<sp/>in<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.has(obj,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator.call(context,<sp/>obj[key],<sp/>key,<sp/>obj)<sp/>===<sp/>breaker)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>results<sp/>of<sp/>applying<sp/>the<sp/>iterator<sp/>to<sp/>each<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`map`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>_.map<sp/>=<sp/>_.collect<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>results<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeMap<sp/>&amp;&amp;<sp/>obj.map<sp/>===<sp/>nativeMap)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.map(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>results[results.length]<sp/>=<sp/>iterator.call(context,<sp/>value,<sp/>index,<sp/>list);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj.length<sp/>===<sp/>+obj.length)<sp/>results.length<sp/>=<sp/>obj.length;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>**Reduce**<sp/>builds<sp/>up<sp/>a<sp/>single<sp/>result<sp/>from<sp/>a<sp/>list<sp/>of<sp/>values,<sp/>aka<sp/>`inject`,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>`foldl`.<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`reduce`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>_.reduce<sp/>=<sp/>_.foldl<sp/>=<sp/>_.inject<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>memo,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>initial<sp/>=<sp/>arguments.length<sp/>&gt;<sp/>2;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/>obj<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeReduce<sp/>&amp;&amp;<sp/>obj.reduce<sp/>===<sp/>nativeReduce)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context)<sp/>iterator<sp/>=<sp/>_.bind(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initial<sp/>?<sp/>obj.reduce(iterator,<sp/>memo)<sp/>:<sp/>obj.reduce(iterator);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initial)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo<sp/>=<sp/>iterator.call(context,<sp/>memo,<sp/>value,<sp/>index,<sp/>list);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initial)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&apos;Reduce<sp/>of<sp/>empty<sp/>array<sp/>with<sp/>no<sp/>initial<sp/>value&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memo;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>right-associative<sp/>version<sp/>of<sp/>reduce,<sp/>also<sp/>known<sp/>as<sp/>`foldr`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`reduceRight`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>_.reduceRight<sp/>=<sp/>_.foldr<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>memo,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>initial<sp/>=<sp/>arguments.length<sp/>&gt;<sp/>2;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/>obj<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeReduceRight<sp/>&amp;&amp;<sp/>obj.reduceRight<sp/>===<sp/>nativeReduceRight)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context)<sp/>iterator<sp/>=<sp/>_.bind(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initial<sp/>?<sp/>obj.reduceRight(iterator,<sp/>memo)<sp/>:<sp/>obj.reduceRight(iterator);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>reversed<sp/>=<sp/>_.toArray(obj).reverse();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(context<sp/>&amp;&amp;<sp/>!initial)<sp/>iterator<sp/>=<sp/>_.bind(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initial<sp/>?<sp/>_.reduce(reversed,<sp/>iterator,<sp/>memo,<sp/>context)<sp/>:<sp/>_.reduce(reversed,<sp/>iterator);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>first<sp/>value<sp/>which<sp/>passes<sp/>a<sp/>truth<sp/>test.<sp/>Aliased<sp/>as<sp/>`detect`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>_.find<sp/>=<sp/>_.detect<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>any(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator.call(context,<sp/>value,<sp/>index,<sp/>list))<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>all<sp/>the<sp/>elements<sp/>that<sp/>pass<sp/>a<sp/>truth<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`filter`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>as<sp/>`select`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>_.filter<sp/>=<sp/>_.select<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>results<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeFilter<sp/>&amp;&amp;<sp/>obj.filter<sp/>===<sp/>nativeFilter)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.filter(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterator.call(context,<sp/>value,<sp/>index,<sp/>list))<sp/>results[results.length]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>all<sp/>the<sp/>elements<sp/>for<sp/>which<sp/>a<sp/>truth<sp/>test<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>_.reject<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>results<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iterator.call(context,<sp/>value,<sp/>index,<sp/>list))<sp/>results[results.length]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>whether<sp/>all<sp/>of<sp/>the<sp/>elements<sp/>match<sp/>a<sp/>truth<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`every`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>as<sp/>`all`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>_.every<sp/>=<sp/>_.all<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeEvery<sp/>&amp;&amp;<sp/>obj.every<sp/>===<sp/>nativeEvery)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.every(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(result<sp/>=<sp/>result<sp/>&amp;&amp;<sp/>iterator.call(context,<sp/>value,<sp/>index,<sp/>list)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>breaker;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>if<sp/>at<sp/>least<sp/>one<sp/>element<sp/>in<sp/>the<sp/>object<sp/>matches<sp/>a<sp/>truth<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`some`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>as<sp/>`any`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>var<sp/>any<sp/>=<sp/>_.some<sp/>=<sp/>_.any<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>||<sp/>(iterator<sp/>=<sp/>_.identity);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeSome<sp/>&amp;&amp;<sp/>obj.some<sp/>===<sp/>nativeSome)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.some(iterator,<sp/>context);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>||<sp/>(result<sp/>=<sp/>iterator.call(context,<sp/>value,<sp/>index,<sp/>list)))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>breaker;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!result;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>if<sp/>a<sp/>given<sp/>value<sp/>is<sp/>included<sp/>in<sp/>the<sp/>array<sp/>or<sp/>object<sp/>using<sp/>`===`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>as<sp/>`contains`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>_.include<sp/>=<sp/>_.contains<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeIndexOf<sp/>&amp;&amp;<sp/>obj.indexOf<sp/>===<sp/>nativeIndexOf)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.indexOf(target)<sp/>!=<sp/>-1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>found<sp/>=<sp/>any(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>===<sp/>target;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>a<sp/>method<sp/>(with<sp/>arguments)<sp/>on<sp/>every<sp/>item<sp/>in<sp/>a<sp/>collection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>_.invoke<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>method)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>args<sp/>=<sp/>slice.call(arguments,<sp/>2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.map(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_.isFunction(method)<sp/>?<sp/>method<sp/>||<sp/>value<sp/>:<sp/>value[method]).apply(value,<sp/>args);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>version<sp/>of<sp/>a<sp/>common<sp/>use<sp/>case<sp/>of<sp/>`map`:<sp/>fetching<sp/>a<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>_.pluck<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.map(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value[key];<sp/>});</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>maximum<sp/>element<sp/>or<sp/>(element-based<sp/>computation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>_.max<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iterator<sp/>&amp;&amp;<sp/>_.isArray(obj))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Math.max.apply(Math,<sp/>obj);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iterator<sp/>&amp;&amp;<sp/>_.isEmpty(obj))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-Infinity;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>{computed<sp/>:<sp/>-Infinity};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>computed<sp/>=<sp/>iterator<sp/>?<sp/>iterator.call(context,<sp/>value,<sp/>index,<sp/>list)<sp/>:<sp/>value;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computed<sp/>&gt;=<sp/>result.computed<sp/>&amp;&amp;<sp/>(result<sp/>=<sp/>{value<sp/>:<sp/>value,<sp/>computed<sp/>:<sp/>computed});</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.value;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>minimum<sp/>element<sp/>(or<sp/>element-based<sp/>computation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>_.min<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iterator<sp/>&amp;&amp;<sp/>_.isArray(obj))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Math.min.apply(Math,<sp/>obj);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iterator<sp/>&amp;&amp;<sp/>_.isEmpty(obj))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Infinity;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>{computed<sp/>:<sp/>Infinity};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>computed<sp/>=<sp/>iterator<sp/>?<sp/>iterator.call(context,<sp/>value,<sp/>index,<sp/>list)<sp/>:<sp/>value;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>computed<sp/>&lt;<sp/>result.computed<sp/>&amp;&amp;<sp/>(result<sp/>=<sp/>{value<sp/>:<sp/>value,<sp/>computed<sp/>:<sp/>computed});</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.value;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shuffle<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>_.shuffle<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>shuffled<sp/>=<sp/>[],<sp/>rand;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffled[0]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>Math.floor(Math.random()<sp/>*<sp/>(index<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffled[index]<sp/>=<sp/>shuffled[rand];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shuffled[rand]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shuffled;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>the<sp/>object&apos;s<sp/>values<sp/>by<sp/>a<sp/>criterion<sp/>produced<sp/>by<sp/>an<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>_.sortBy<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.pluck(_.map(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index,<sp/>list)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>:<sp/>value,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>criteria<sp/>:<sp/>iterator.call(context,<sp/>value,<sp/>index,<sp/>list)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}).sort(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(left,<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>a<sp/>=<sp/>left.criteria,<sp/>b<sp/>=<sp/>right.criteria;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b<sp/>?<sp/>-1<sp/>:<sp/>a<sp/>&gt;<sp/>b<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}),<sp/></highlight><highlight class="stringliteral">&apos;value&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Groups<sp/>the<sp/>object&apos;s<sp/>values<sp/>by<sp/>a<sp/>criterion.<sp/>Pass<sp/>either<sp/>a<sp/>string<sp/>attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>group<sp/>by,<sp/>or<sp/>a<sp/>function<sp/>that<sp/>returns<sp/>the<sp/>criterion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>_.groupBy<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>iterator<sp/>=<sp/>_.isFunction(val)<sp/>?<sp/>val<sp/>:<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj[val];<sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>each(obj,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value,<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>key<sp/>=<sp/>iterator(value,<sp/>index);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(result[key]<sp/>||<sp/>(result[key]<sp/>=<sp/>[])).push(value);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>comparator<sp/>function<sp/>to<sp/>figure<sp/>out<sp/>at<sp/>what<sp/>index<sp/>an<sp/>object<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>inserted<sp/>so<sp/>as<sp/>to<sp/>maintain<sp/>order.<sp/>Uses<sp/>binary<sp/>search.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>_.sortedIndex<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>obj,<sp/>iterator)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>||<sp/>(iterator<sp/>=<sp/>_.identity);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>low<sp/>=<sp/>0,<sp/>high<sp/>=<sp/>array.length;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(low<sp/>&lt;<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>mid<sp/>=<sp/>(low<sp/>+<sp/>high)<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iterator(array[mid])<sp/>&lt;<sp/>iterator(obj)<sp/>?<sp/>low<sp/>=<sp/>mid<sp/>+<sp/>1<sp/>:<sp/>high<sp/>=<sp/>mid;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>low;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Safely<sp/>convert<sp/>anything<sp/>iterable<sp/>into<sp/>a<sp/>real,<sp/>live<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>_.toArray<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(iterable)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!iterable)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[];</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iterable.toArray)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterable.toArray();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.isArray(iterable))<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slice.call(iterable);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.isArguments(iterable))<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slice.call(iterable);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.values(iterable);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>an<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>_.size<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.toArray(obj).length;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Array<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>first<sp/>element<sp/>of<sp/>an<sp/>array.<sp/>Passing<sp/>**n**<sp/>will<sp/>return<sp/>the<sp/>first<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>in<sp/>the<sp/>array.<sp/>Aliased<sp/>as<sp/>`head`.<sp/>The<sp/>**guard**<sp/>check<sp/>allows<sp/>it<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>`_.map`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>_.first<sp/>=<sp/>_.head<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>n,<sp/>guard)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>!=<sp/>null)<sp/>&amp;&amp;<sp/>!guard<sp/>?<sp/>slice.call(array,<sp/>0,<sp/>n)<sp/>:<sp/>array[0];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>everything<sp/>but<sp/>the<sp/>last<sp/>entry<sp/>of<sp/>the<sp/>array.<sp/>Especcialy<sp/>useful<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>arguments<sp/>object.<sp/>Passing<sp/>**n**<sp/>will<sp/>return<sp/>all<sp/>the<sp/>values<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>array,<sp/>excluding<sp/>the<sp/>last<sp/>N.<sp/>The<sp/>**guard**<sp/>check<sp/>allows<sp/>it<sp/>to<sp/>work<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>`_.map`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>_.initial<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>n,<sp/>guard)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slice.call(array,<sp/>0,<sp/>array.length<sp/>-<sp/>((n<sp/>==<sp/>null)<sp/>||<sp/>guard<sp/>?<sp/>1<sp/>:<sp/>n));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>last<sp/>element<sp/>of<sp/>an<sp/>array.<sp/>Passing<sp/>**n**<sp/>will<sp/>return<sp/>the<sp/>last<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>in<sp/>the<sp/>array.<sp/>The<sp/>**guard**<sp/>check<sp/>allows<sp/>it<sp/>to<sp/>work<sp/>with<sp/>`_.map`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>_.last<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>n,<sp/>guard)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>!=<sp/>null)<sp/>&amp;&amp;<sp/>!guard)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slice.call(array,<sp/>Math.max(array.length<sp/>-<sp/>n,<sp/>0));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array[array.length<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>everything<sp/>but<sp/>the<sp/>first<sp/>entry<sp/>of<sp/>the<sp/>array.<sp/>Aliased<sp/>as<sp/>`tail`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Especially<sp/>useful<sp/>on<sp/>the<sp/>arguments<sp/>object.<sp/>Passing<sp/>an<sp/>**index**<sp/>will<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>values<sp/>in<sp/>the<sp/>array<sp/>from<sp/>that<sp/>index<sp/>onward.<sp/>The<sp/>**guard**</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>allows<sp/>it<sp/>to<sp/>work<sp/>with<sp/>`_.map`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>_.rest<sp/>=<sp/>_.tail<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>index,<sp/>guard)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>slice.call(array,<sp/>(index<sp/>==<sp/>null)<sp/>||<sp/>guard<sp/>?<sp/>1<sp/>:<sp/>index);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Trim<sp/>out<sp/>all<sp/>falsy<sp/>values<sp/>from<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>_.compact<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.filter(array,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!value;<sp/>});</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>completely<sp/>flattened<sp/>version<sp/>of<sp/>an<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>_.flatten<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>shallow)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.reduce(array,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(memo,<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.isArray(value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memo.concat(shallow<sp/>?<sp/>value<sp/>:<sp/>_.flatten(value));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memo[memo.length]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memo;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>[]);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>version<sp/>of<sp/>the<sp/>array<sp/>that<sp/>does<sp/>not<sp/>contain<sp/>the<sp/>specified<sp/>value(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>_.without<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.difference(array,<sp/>slice.call(arguments,<sp/>1));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Produce<sp/>a<sp/>duplicate-free<sp/>version<sp/>of<sp/>the<sp/>array.<sp/>If<sp/>the<sp/>array<sp/>has<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>sorted,<sp/>you<sp/>have<sp/>the<sp/>option<sp/>of<sp/>using<sp/>a<sp/>faster<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>as<sp/>`unique`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>_.uniq<sp/>=<sp/>_.unique<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>isSorted,<sp/>iterator)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>initial<sp/>=<sp/>iterator<sp/>?<sp/>_.map(array,<sp/>iterator)<sp/>:<sp/>array;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>_.reduce(initial,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(memo,<sp/>el,<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>i<sp/>||<sp/>(isSorted<sp/>===<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>?<sp/>_.last(memo)<sp/>!=<sp/>el<sp/>:<sp/>!_.include(memo,<sp/>el)))<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memo[memo.length]<sp/>=<sp/>el;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[result.length]<sp/>=<sp/>array[i];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memo;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>[]);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Produce<sp/>an<sp/>array<sp/>that<sp/>contains<sp/>the<sp/>union:<sp/>each<sp/>distinct<sp/>element<sp/>from<sp/>all<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>passed-in<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>_.union<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.uniq(_.flatten(arguments,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Produce<sp/>an<sp/>array<sp/>that<sp/>contains<sp/>every<sp/>item<sp/>shared<sp/>between<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>passed-in<sp/>arrays.<sp/>(Aliased<sp/>as<sp/>&quot;intersect&quot;<sp/>for<sp/>back-compat.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>_.intersection<sp/>=<sp/>_.intersect<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>rest<sp/>=<sp/>slice.call(arguments,<sp/>1);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.filter(_.uniq(array),<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(item)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.every(rest,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(other)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.indexOf(other,<sp/>item)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>difference<sp/>between<sp/>one<sp/>array<sp/>and<sp/>a<sp/>number<sp/>of<sp/>other<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>the<sp/>elements<sp/>present<sp/>in<sp/>just<sp/>the<sp/>first<sp/>array<sp/>will<sp/>remain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>_.difference<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>rest<sp/>=<sp/>_.flatten(slice.call(arguments,<sp/>1));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.filter(array,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!_.include(rest,<sp/>value);<sp/>});</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Zip<sp/>together<sp/>multiple<sp/>lists<sp/>into<sp/>a<sp/>single<sp/>array<sp/>--<sp/>elements<sp/>that<sp/>share</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>index<sp/>go<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>_.zip<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>args<sp/>=<sp/>slice.call(arguments);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>length<sp/>=<sp/>_.max(_.pluck(args,<sp/></highlight><highlight class="stringliteral">&apos;length&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>results<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Array(length);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>results[i]<sp/>=<sp/>_.pluck(args,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>browser<sp/>doesn&apos;t<sp/>supply<sp/>us<sp/>with<sp/>indexOf<sp/>(I&apos;m<sp/>looking<sp/>at<sp/>you,<sp/>**MSIE**),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>this<sp/>function.<sp/>Return<sp/>the<sp/>position<sp/>of<sp/>the<sp/>first<sp/>occurrence<sp/>of<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>item<sp/>in<sp/>an<sp/>array,<sp/>or<sp/>-1<sp/>if<sp/>the<sp/>item<sp/>is<sp/>not<sp/>included<sp/>in<sp/>the<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`indexOf`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>array<sp/>is<sp/>large<sp/>and<sp/>already<sp/>in<sp/>sort<sp/>order,<sp/>pass<sp/>`true`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>**isSorted**<sp/>to<sp/>use<sp/>binary<sp/>search.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>_.indexOf<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>item,<sp/>isSorted)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>i,<sp/>l;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isSorted)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>_.sortedIndex(array,<sp/>item);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array[i]<sp/>===<sp/>item<sp/>?<sp/>i<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeIndexOf<sp/>&amp;&amp;<sp/>array.indexOf<sp/>===<sp/>nativeIndexOf)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array.indexOf(item);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>l<sp/>=<sp/>array.length;<sp/>i<sp/>&lt;<sp/>l;<sp/>i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>in<sp/>array<sp/>&amp;&amp;<sp/>array[i]<sp/>===<sp/>item)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`lastIndexOf`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>_.lastIndexOf<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(array,<sp/>item)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(array<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nativeLastIndexOf<sp/>&amp;&amp;<sp/>array.lastIndexOf<sp/>===<sp/>nativeLastIndexOf)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array.lastIndexOf(item);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>i<sp/>=<sp/>array.length;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i--)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>in<sp/>array<sp/>&amp;&amp;<sp/>array[i]<sp/>===<sp/>item)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>an<sp/>integer<sp/>Array<sp/>containing<sp/>an<sp/>arithmetic<sp/>progression.<sp/>A<sp/>port<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>native<sp/>Python<sp/>`range()`<sp/>function.<sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[the<sp/>Python<sp/>documentation](http://docs.python.org/library/functions.html#range).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>_.range<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(start,<sp/>stop,<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arguments.length<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stop<sp/>=<sp/>start<sp/>||<sp/>0;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>step<sp/>=<sp/>arguments[2]<sp/>||<sp/>1;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>len<sp/>=<sp/>Math.max(Math.ceil((stop<sp/>-<sp/>start)<sp/>/<sp/>step),<sp/>0);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>range<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Array(len);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(idx<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>range[idx++]<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>step;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>(ahem)<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reusable<sp/>constructor<sp/>function<sp/>for<sp/>prototype<sp/>setting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>var<sp/>ctor<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(){};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>function<sp/>bound<sp/>to<sp/>a<sp/>given<sp/>object<sp/>(assigning<sp/>`this`,<sp/>and<sp/>arguments,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optionally).<sp/>Binding<sp/>with<sp/>arguments<sp/>is<sp/>also<sp/>known<sp/>as<sp/>`curry`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`Function.bind`<sp/>if<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>check<sp/>for<sp/>`func.bind`<sp/>first,<sp/>to<sp/>fail<sp/>fast<sp/>when<sp/>`func`<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>_.bind<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>bind(func,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>bound,<sp/>args;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func.bind<sp/>===<sp/>nativeBind<sp/>&amp;&amp;<sp/>nativeBind)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nativeBind.apply(func,<sp/>slice.call(arguments,<sp/>1));</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_.isFunction(func))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TypeError;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>slice.call(arguments,<sp/>2);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bound<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>instanceof<sp/>bound))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func.apply(context,<sp/>args.concat(slice.call(arguments)));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ctor.prototype<sp/>=<sp/>func.prototype;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ctor;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>result<sp/>=<sp/>func.apply(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>args.concat(slice.call(arguments)));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Object(result)<sp/>===<sp/>result)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>all<sp/>of<sp/>an<sp/>object&apos;s<sp/>methods<sp/>to<sp/>that<sp/>object.<sp/>Useful<sp/>for<sp/>ensuring<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>callbacks<sp/>defined<sp/>on<sp/>an<sp/>object<sp/>belong<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>_.bindAll<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>funcs<sp/>=<sp/>slice.call(arguments,<sp/>1);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(funcs.length<sp/>==<sp/>0)<sp/>funcs<sp/>=<sp/>_.functions(obj);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>each(funcs,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(f)<sp/>{<sp/>obj[f]<sp/>=<sp/>_.bind(obj[f],<sp/>obj);<sp/>});</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Memoize<sp/>an<sp/>expensive<sp/>function<sp/>by<sp/>storing<sp/>its<sp/>results.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>_.memoize<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func,<sp/>hasher)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>memo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>hasher<sp/>||<sp/>(hasher<sp/>=<sp/>_.identity);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>key<sp/>=<sp/>hasher.apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arguments);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.has(memo,<sp/>key)<sp/>?<sp/>memo[key]<sp/>:<sp/>(memo[key]<sp/>=<sp/>func.apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arguments));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delays<sp/>a<sp/>function<sp/>for<sp/>the<sp/>given<sp/>number<sp/>of<sp/>milliseconds,<sp/>and<sp/>then<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>with<sp/>the<sp/>arguments<sp/>supplied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>_.delay<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func,<sp/>wait)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>args<sp/>=<sp/>slice.call(arguments,<sp/>2);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTimeout(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func.apply(func,<sp/>args);<sp/>},<sp/>wait);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Defers<sp/>a<sp/>function,<sp/>scheduling<sp/>it<sp/>to<sp/>run<sp/>after<sp/>the<sp/>current<sp/>call<sp/>stack<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cleared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>_.defer<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.delay.apply(_,<sp/>[func,<sp/>1].concat(slice.call(arguments,<sp/>1)));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function,<sp/>that,<sp/>when<sp/>invoked,<sp/>will<sp/>only<sp/>be<sp/>triggered<sp/>at<sp/>most<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>a<sp/>given<sp/>window<sp/>of<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>_.throttle<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func,<sp/>wait)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>context,<sp/>args,<sp/>timeout,<sp/>throttling,<sp/>more;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>whenDone<sp/>=<sp/>_.debounce(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(){<sp/>more<sp/>=<sp/>throttling<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>},<sp/>wait);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>args<sp/>=<sp/>arguments;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>later<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(more)<sp/>func.apply(context,<sp/>args);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whenDone();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timeout)<sp/>timeout<sp/>=<sp/>setTimeout(later,<sp/>wait);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(throttling)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func.apply(context,<sp/>args);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>whenDone();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>throttling<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function,<sp/>that,<sp/>as<sp/>long<sp/>as<sp/>it<sp/>continues<sp/>to<sp/>be<sp/>invoked,<sp/>will<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>triggered.<sp/>The<sp/>function<sp/>will<sp/>be<sp/>called<sp/>after<sp/>it<sp/>stops<sp/>being<sp/>called<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>N<sp/>milliseconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>_.debounce<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func,<sp/>wait)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>timeout;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>context<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>args<sp/>=<sp/>arguments;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>later<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func.apply(context,<sp/>args);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clearTimeout(timeout);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/>setTimeout(later,<sp/>wait);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>that<sp/>will<sp/>be<sp/>executed<sp/>at<sp/>most<sp/>one<sp/>time,<sp/>no<sp/>matter<sp/>how</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>often<sp/>you<sp/>call<sp/>it.<sp/>Useful<sp/>for<sp/>lazy<sp/>initialization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>_.once<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>ran<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>memo;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ran)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memo;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ran<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memo<sp/>=<sp/>func.apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arguments);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>first<sp/>function<sp/>passed<sp/>as<sp/>an<sp/>argument<sp/>to<sp/>the<sp/>second,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allowing<sp/>you<sp/>to<sp/>adjust<sp/>arguments,<sp/>run<sp/>code<sp/>before<sp/>and<sp/>after,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conditionally<sp/>execute<sp/>the<sp/>original<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>_.wrap<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(func,<sp/>wrapper)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>args<sp/>=<sp/>[func].concat(slice.call(arguments,<sp/>0));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper.apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>args);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>that<sp/>is<sp/>the<sp/>composition<sp/>of<sp/>a<sp/>list<sp/>of<sp/>functions,<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>consuming<sp/>the<sp/>return<sp/>value<sp/>of<sp/>the<sp/>function<sp/>that<sp/>follows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>_.compose<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>funcs<sp/>=<sp/>arguments;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>args<sp/>=<sp/>arguments;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>funcs.length<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>[funcs[i].apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>args)];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args[0];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>function<sp/>that<sp/>will<sp/>only<sp/>be<sp/>executed<sp/>after<sp/>being<sp/>called<sp/>N<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>_.after<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(times,<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(times<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--times<sp/>&lt;<sp/>1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func.apply(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arguments);<sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Object<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>names<sp/>of<sp/>an<sp/>object&apos;s<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>**ECMAScript<sp/>5**&apos;s<sp/>native<sp/>`Object.keys`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>_.keys<sp/>=<sp/>nativeKeys<sp/>||<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>!==<sp/>Object(obj))<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TypeError(</highlight><highlight class="stringliteral">&apos;Invalid<sp/>object&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>keys<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>key<sp/>in<sp/>obj)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.has(obj,<sp/>key))<sp/>keys[keys.length]<sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>values<sp/>of<sp/>an<sp/>object&apos;s<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>_.values<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.map(obj,<sp/>_.identity);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>sorted<sp/>list<sp/>of<sp/>the<sp/>function<sp/>names<sp/>available<sp/>on<sp/>the<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliased<sp/>as<sp/>`methods`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>_.functions<sp/>=<sp/>_.methods<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>names<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>key<sp/>in<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.isFunction(obj[key]))<sp/>names.push(key);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names.sort();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>a<sp/>given<sp/>object<sp/>with<sp/>all<sp/>the<sp/>properties<sp/>in<sp/>passed-in<sp/>object(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>_.extend<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>each(slice.call(arguments,<sp/>1),<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(source)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>prop<sp/>in<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj[prop]<sp/>=<sp/>source[prop];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>a<sp/>given<sp/>object<sp/>with<sp/>default<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>_.defaults<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>each(slice.call(arguments,<sp/>1),<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(source)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>prop<sp/>in<sp/>source)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj[prop]<sp/>==<sp/>null)<sp/>obj[prop]<sp/>=<sp/>source[prop];</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>(shallow-cloned)<sp/>duplicate<sp/>of<sp/>an<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>_.clone<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_.isObject(obj))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_.isArray(obj)<sp/>?<sp/>obj.slice()<sp/>:<sp/>_.extend({},<sp/>obj);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invokes<sp/>interceptor<sp/>with<sp/>the<sp/>obj,<sp/>and<sp/>then<sp/>returns<sp/>obj.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>primary<sp/>purpose<sp/>of<sp/>this<sp/>method<sp/>is<sp/>to<sp/>&quot;tap<sp/>into&quot;<sp/>a<sp/>method<sp/>chain,<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>to<sp/>perform<sp/>operations<sp/>on<sp/>intermediate<sp/>results<sp/>within<sp/>the<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>_.tap<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>interceptor)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>interceptor(obj);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Internal<sp/>recursive<sp/>comparison<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>eq(a,<sp/>b,<sp/>stack)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Identical<sp/>objects<sp/>are<sp/>equal.<sp/>`0<sp/>===<sp/>-0`,<sp/>but<sp/>they<sp/>aren&apos;t<sp/>identical.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>Harmony<sp/>`egal`<sp/>proposal:<sp/>http://wiki.ecmascript.org/doku.php?id=harmony:egal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>===<sp/>b)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>!==<sp/>0<sp/>||<sp/>1<sp/>/<sp/>a<sp/>==<sp/>1<sp/>/<sp/>b;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>strict<sp/>comparison<sp/>is<sp/>necessary<sp/>because<sp/>`null<sp/>==<sp/>undefined`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>null<sp/>||<sp/>b<sp/>==<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>===<sp/>b;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unwrap<sp/>any<sp/>wrapped<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a._chain)<sp/>a<sp/>=<sp/>a._wrapped;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b._chain)<sp/>b<sp/>=<sp/>b._wrapped;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>a<sp/>custom<sp/>`isEqual`<sp/>method<sp/>if<sp/>one<sp/>is<sp/>provided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.isEqual<sp/>&amp;&amp;<sp/>_.isFunction(a.isEqual))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.isEqual(b);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.isEqual<sp/>&amp;&amp;<sp/>_.isFunction(b.isEqual))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b.isEqual(a);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>`[[Class]]`<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>className<sp/>=<sp/>toString.call(a);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>!=<sp/>toString.call(b))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(className)<sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strings,<sp/>numbers,<sp/>dates,<sp/>and<sp/>booleans<sp/>are<sp/>compared<sp/>by<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>String]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Primitives<sp/>and<sp/>their<sp/>corresponding<sp/>object<sp/>wrappers<sp/>are<sp/>equivalent;<sp/>thus,<sp/>`&quot;5&quot;`<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>to<sp/>`new<sp/>String(&quot;5&quot;)`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>==<sp/>String(b);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Number]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`NaN`s<sp/>are<sp/>equivalent,<sp/>but<sp/>non-reflexive.<sp/>An<sp/>`egal`<sp/>comparison<sp/>is<sp/>performed<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>numeric<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>!=<sp/>+a<sp/>?<sp/>b<sp/>!=<sp/>+b<sp/>:<sp/>(a<sp/>==<sp/>0<sp/>?<sp/>1<sp/>/<sp/>a<sp/>==<sp/>1<sp/>/<sp/>b<sp/>:<sp/>a<sp/>==<sp/>+b);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Date]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Boolean]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coerce<sp/>dates<sp/>and<sp/>booleans<sp/>to<sp/>numeric<sp/>primitive<sp/>values.<sp/>Dates<sp/>are<sp/>compared<sp/>by<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>millisecond<sp/>representations.<sp/>Note<sp/>that<sp/>invalid<sp/>dates<sp/>with<sp/>millisecond<sp/>representations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>`NaN`<sp/>are<sp/>not<sp/>equivalent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>+a<sp/>==<sp/>+b;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RegExps<sp/>are<sp/>compared<sp/>by<sp/>their<sp/>source<sp/>patterns<sp/>and<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>RegExp]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.source<sp/>==<sp/>b.source<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.global<sp/>==<sp/>b.global<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.multiline<sp/>==<sp/>b.multiline<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.ignoreCase<sp/>==<sp/>b.ignoreCase;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeof<sp/>a<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal"><sp/>||<sp/>typeof<sp/>b<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;object&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>equality<sp/>for<sp/>cyclic<sp/>structures.<sp/>The<sp/>algorithm<sp/>for<sp/>detecting<sp/>cyclic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>structures<sp/>is<sp/>adapted<sp/>from<sp/>ES<sp/>5.1<sp/>section<sp/>15.12.3,<sp/>abstract<sp/>operation<sp/>`JO`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>length<sp/>=<sp/>stack.length;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(length--)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>search.<sp/>Performance<sp/>is<sp/>inversely<sp/>proportional<sp/>to<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unique<sp/>nested<sp/>structures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack[length]<sp/>==<sp/>a)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>first<sp/>object<sp/>to<sp/>the<sp/>stack<sp/>of<sp/>traversed<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>stack.push(a);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>size<sp/>=<sp/>0,<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>compare<sp/>objects<sp/>and<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(className<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Array]&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>array<sp/>lengths<sp/>to<sp/>determine<sp/>if<sp/>a<sp/>deep<sp/>comparison<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>a.length;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>size<sp/>==<sp/>b.length;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>compare<sp/>the<sp/>contents,<sp/>ignoring<sp/>non-numeric<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size--)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>commutative<sp/>equality<sp/>for<sp/>sparse<sp/>arrays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(result<sp/>=<sp/>size<sp/>in<sp/>a<sp/>==<sp/>size<sp/>in<sp/>b<sp/>&amp;&amp;<sp/>eq(a[size],<sp/>b[size],<sp/>stack)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Objects<sp/>with<sp/>different<sp/>constructors<sp/>are<sp/>not<sp/>equivalent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;constructor&apos;</highlight><highlight class="normal"><sp/>in<sp/>a<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;constructor&apos;</highlight><highlight class="normal"><sp/>in<sp/>b<sp/>||<sp/>a.constructor<sp/>!=<sp/>b.constructor)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>compare<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>key<sp/>in<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.has(a,<sp/>key))<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>the<sp/>expected<sp/>number<sp/>of<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size++;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deep<sp/>compare<sp/>each<sp/>member.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(result<sp/>=<sp/>_.has(b,<sp/>key)<sp/>&amp;&amp;<sp/>eq(a[key],<sp/>b[key],<sp/>stack)))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>both<sp/>objects<sp/>contain<sp/>the<sp/>same<sp/>number<sp/>of<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(key<sp/>in<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.has(b,<sp/>key)<sp/>&amp;&amp;<sp/>!(size--))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>!size;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>first<sp/>object<sp/>from<sp/>the<sp/>stack<sp/>of<sp/>traversed<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>stack.pop();</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>a<sp/>deep<sp/>comparison<sp/>to<sp/>check<sp/>if<sp/>two<sp/>objects<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>_.isEqual<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eq(a,<sp/>b,<sp/>[]);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>array,<sp/>string,<sp/>or<sp/>object<sp/>empty?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>&quot;empty&quot;<sp/>object<sp/>has<sp/>no<sp/>enumerable<sp/>own-properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>_.isEmpty<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.isArray(obj)<sp/>||<sp/>_.isString(obj))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj.length<sp/>===<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(var<sp/>key<sp/>in<sp/>obj)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_.has(obj,<sp/>key))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>a<sp/>DOM<sp/>element?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>_.isElement<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!(obj<sp/>&amp;&amp;<sp/>obj.nodeType<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>an<sp/>array?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Delegates<sp/>to<sp/>ECMA5&apos;s<sp/>native<sp/>Array.isArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>_.isArray<sp/>=<sp/>nativeIsArray<sp/>||<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Array]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>variable<sp/>an<sp/>object?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>_.isObject<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj<sp/>===<sp/>Object(obj);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>variable<sp/>an<sp/>arguments<sp/>object?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>_.isArguments<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Arguments]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_.isArguments(arguments))<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>_.isArguments<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!(obj<sp/>&amp;&amp;<sp/>_.has(obj,<sp/></highlight><highlight class="stringliteral">&apos;callee&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>a<sp/>function?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>_.isFunction<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Function]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>a<sp/>string?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>_.isString<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>String]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>a<sp/>number?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>_.isNumber<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Number]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>given<sp/>value<sp/>`NaN`?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>_.isNaN<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`NaN`<sp/>is<sp/>the<sp/>only<sp/>value<sp/>for<sp/>which<sp/>`===`<sp/>is<sp/>not<sp/>reflexive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj<sp/>!==<sp/>obj;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>a<sp/>boolean?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>_.isBoolean<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj<sp/>===<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>||<sp/>obj<sp/>===<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>||<sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Boolean]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>a<sp/>date?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>_.isDate<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>Date]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>given<sp/>value<sp/>a<sp/>regular<sp/>expression?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>_.isRegExp<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>toString.call(obj)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;[object<sp/>RegExp]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>value<sp/>equal<sp/>to<sp/>null?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>_.isNull<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj<sp/>===<sp/>null;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>a<sp/>given<sp/>variable<sp/>undefined?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>_.isUndefined<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj<sp/>===<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>own<sp/>property?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>_.has<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj,<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasOwnProperty.call(obj,<sp/>key);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Utility<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>Underscore.js<sp/>in<sp/>*noConflict*<sp/>mode,<sp/>returning<sp/>the<sp/>`_`<sp/>variable<sp/>to<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>owner.<sp/>Returns<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>Underscore<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>_.noConflict<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>root._<sp/>=<sp/>previousUnderscore;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>identity<sp/>function<sp/>around<sp/>for<sp/>default<sp/>iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>_.identity<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(value)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>a<sp/>function<sp/>**n**<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>_.times<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(n,<sp/>iterator,<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>iterator.call(context,<sp/>i);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Escape<sp/>a<sp/>string<sp/>for<sp/>HTML<sp/>interpolation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>_.escape<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(string)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">+</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">).replace(/&amp;/g,<sp/></highlight><highlight class="stringliteral">&apos;&amp;amp;&apos;</highlight><highlight class="normal">).replace(/&lt;/g,<sp/></highlight><highlight class="stringliteral">&apos;&amp;lt;&apos;</highlight><highlight class="normal">).replace(/&gt;/g,<sp/></highlight><highlight class="stringliteral">&apos;&amp;gt;&apos;</highlight><highlight class="normal">).replace(/</highlight><highlight class="stringliteral">&quot;/g,<sp/>&apos;&amp;quot;&apos;).replace(/&apos;/g,<sp/>&apos;&amp;#x27;&apos;).replace(/\//g,&apos;&amp;#x2F;&apos;);</highlight></codeline>
<codeline lineno="869"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="870"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="871"><highlight class="stringliteral"><sp/><sp/>//<sp/>Add<sp/>your<sp/>own<sp/>custom<sp/>functions<sp/>to<sp/>the<sp/>Underscore<sp/>object,<sp/>ensuring<sp/>that</highlight></codeline>
<codeline lineno="872"><highlight class="stringliteral"><sp/><sp/>//<sp/>they&apos;re<sp/>correctly<sp/>added<sp/>to<sp/>the<sp/>OOP<sp/>wrapper<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="873"><highlight class="stringliteral"><sp/><sp/>_.mixin<sp/>=<sp/>function(obj)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>each(_.functions(obj),<sp/>function(name){</highlight></codeline>
<codeline lineno="875"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>addToWrapper(name,<sp/>_[name]<sp/>=<sp/>obj[name]);</highlight></codeline>
<codeline lineno="876"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="877"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="878"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="879"><highlight class="stringliteral"><sp/><sp/>//<sp/>Generate<sp/>a<sp/>unique<sp/>integer<sp/>id<sp/>(unique<sp/>within<sp/>the<sp/>entire<sp/>client<sp/>session).</highlight></codeline>
<codeline lineno="880"><highlight class="stringliteral"><sp/><sp/>//<sp/>Useful<sp/>for<sp/>temporary<sp/>DOM<sp/>ids.</highlight></codeline>
<codeline lineno="881"><highlight class="stringliteral"><sp/><sp/>var<sp/>idCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="stringliteral"><sp/><sp/>_.uniqueId<sp/>=<sp/>function(prefix)<sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>id<sp/>=<sp/>idCounter++;</highlight></codeline>
<codeline lineno="884"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>prefix<sp/>?<sp/>prefix<sp/>+<sp/>id<sp/>:<sp/>id;</highlight></codeline>
<codeline lineno="885"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="886"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="887"><highlight class="stringliteral"><sp/><sp/>//<sp/>By<sp/>default,<sp/>Underscore<sp/>uses<sp/>ERB-style<sp/>template<sp/>delimiters,<sp/>change<sp/>the</highlight></codeline>
<codeline lineno="888"><highlight class="stringliteral"><sp/><sp/>//<sp/>following<sp/>template<sp/>settings<sp/>to<sp/>use<sp/>alternative<sp/>delimiters.</highlight></codeline>
<codeline lineno="889"><highlight class="stringliteral"><sp/><sp/>_.templateSettings<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>evaluate<sp/><sp/><sp/><sp/>:<sp/>/&lt;%([\s\S]+?)%&gt;/g,</highlight></codeline>
<codeline lineno="891"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>interpolate<sp/>:<sp/>/&lt;%=([\s\S]+?)%&gt;/g,</highlight></codeline>
<codeline lineno="892"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>escape<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>/&lt;%-([\s\S]+?)%&gt;/g</highlight></codeline>
<codeline lineno="893"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="894"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="895"><highlight class="stringliteral"><sp/><sp/>//<sp/>When<sp/>customizing<sp/>`templateSettings`,<sp/>if<sp/>you<sp/>don&apos;t<sp/>want<sp/>to<sp/>define<sp/>an</highlight></codeline>
<codeline lineno="896"><highlight class="stringliteral"><sp/><sp/>//<sp/>interpolation,<sp/>evaluation<sp/>or<sp/>escaping<sp/>regex,<sp/>we<sp/>need<sp/>one<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="897"><highlight class="stringliteral"><sp/><sp/>//<sp/>guaranteed<sp/>not<sp/>to<sp/>match.</highlight></codeline>
<codeline lineno="898"><highlight class="stringliteral"><sp/><sp/>var<sp/>noMatch<sp/>=<sp/>/.^/;</highlight></codeline>
<codeline lineno="899"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="900"><highlight class="stringliteral"><sp/><sp/>//<sp/>Within<sp/>an<sp/>interpolation,<sp/>evaluation,<sp/>or<sp/>escaping,<sp/>remove<sp/>HTML<sp/>escaping</highlight></codeline>
<codeline lineno="901"><highlight class="stringliteral"><sp/><sp/>//<sp/>that<sp/>had<sp/>been<sp/>previously<sp/>added.</highlight></codeline>
<codeline lineno="902"><highlight class="stringliteral"><sp/><sp/>var<sp/>unescape<sp/>=<sp/>function(code)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>code.replace(/\\\\/g,<sp/>&apos;\\&apos;).replace(/\\&apos;/g,<sp/>&quot;</highlight><highlight class="stringliteral">&apos;&quot;);</highlight></codeline>
<codeline lineno="904"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="905"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="906"><highlight class="stringliteral"><sp/><sp/>//<sp/>JavaScript<sp/>micro-templating,<sp/>similar<sp/>to<sp/>John<sp/>Resig&apos;</highlight><highlight class="normal">s<sp/>implementation.</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Underscore<sp/>templating<sp/>handles<sp/>arbitrary<sp/>delimiters,<sp/>preserves<sp/>whitespace,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>correctly<sp/>escapes<sp/>quotes<sp/>within<sp/>interpolated<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>_.template<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(str,<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>c<sp/><sp/>=<sp/>_.templateSettings;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>tmpl<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;var<sp/>__p=[],print=function(){__p.push.apply(__p,arguments);};&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;with(obj||{}){__p.push(\&apos;&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str.replace(/\\/g,<sp/></highlight><highlight class="stringliteral">&apos;\\\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(/</highlight><highlight class="stringliteral">&apos;/g,<sp/>&quot;\\&apos;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="915"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(c.escape<sp/>||<sp/>noMatch,<sp/>function(match,<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;</highlight><highlight class="stringliteral">&apos;,_.escape(&quot;<sp/>+<sp/>unescape(code)<sp/>+<sp/>&quot;),&apos;</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="917"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="918"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(c.interpolate<sp/>||<sp/>noMatch,<sp/>function(match,<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;</highlight><highlight class="stringliteral">&apos;,&quot;<sp/>+<sp/>unescape(code)<sp/>+<sp/>&quot;,&apos;</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="920"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="921"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(c.evaluate<sp/>||<sp/>noMatch,<sp/>function(match,<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;</highlight><highlight class="stringliteral">&apos;);&quot;<sp/>+<sp/>unescape(code).replace(/[\r\n\t]/g,<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;)<sp/>+<sp/>&quot;;__p.push(&apos;</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="923"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="924"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(/\r/g,<sp/>&apos;\\r&apos;)</highlight></codeline>
<codeline lineno="925"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(/\n/g,<sp/>&apos;\\n&apos;)</highlight></codeline>
<codeline lineno="926"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.replace(/\t/g,<sp/>&apos;\\t&apos;)</highlight></codeline>
<codeline lineno="927"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>&quot;</highlight><highlight class="stringliteral">&apos;);}return<sp/>__p.join(&apos;</highlight><highlight class="stringliteral">&apos;);&quot;;</highlight></codeline>
<codeline lineno="928"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>func<sp/>=<sp/>new<sp/>Function(&apos;</highlight><highlight class="normal">obj</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">_</highlight><highlight class="stringliteral">&apos;,<sp/>tmpl);</highlight></codeline>
<codeline lineno="929"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(data)<sp/>return<sp/>func(data,<sp/>_);</highlight></codeline>
<codeline lineno="930"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>function(data)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>func.call(this,<sp/>data,<sp/>_);</highlight></codeline>
<codeline lineno="932"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="933"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="934"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="935"><highlight class="stringliteral"><sp/><sp/>//<sp/>Add<sp/>a<sp/>&quot;chain&quot;<sp/>function,<sp/>which<sp/>will<sp/>delegate<sp/>to<sp/>the<sp/>wrapper.</highlight></codeline>
<codeline lineno="936"><highlight class="stringliteral"><sp/><sp/>_.chain<sp/>=<sp/>function(obj)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>_(obj).chain();</highlight></codeline>
<codeline lineno="938"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="939"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="940"><highlight class="stringliteral"><sp/><sp/>//<sp/>The<sp/>OOP<sp/>Wrapper</highlight></codeline>
<codeline lineno="941"><highlight class="stringliteral"><sp/><sp/>//<sp/>---------------</highlight></codeline>
<codeline lineno="942"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="943"><highlight class="stringliteral"><sp/><sp/>//<sp/>If<sp/>Underscore<sp/>is<sp/>called<sp/>as<sp/>a<sp/>function,<sp/>it<sp/>returns<sp/>a<sp/>wrapped<sp/>object<sp/>that</highlight></codeline>
<codeline lineno="944"><highlight class="stringliteral"><sp/><sp/>//<sp/>can<sp/>be<sp/>used<sp/>OO-style.<sp/>This<sp/>wrapper<sp/>holds<sp/>altered<sp/>versions<sp/>of<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="945"><highlight class="stringliteral"><sp/><sp/>//<sp/>underscore<sp/>functions.<sp/>Wrapped<sp/>objects<sp/>may<sp/>be<sp/>chained.</highlight></codeline>
<codeline lineno="946"><highlight class="stringliteral"><sp/><sp/>var<sp/>wrapper<sp/>=<sp/>function(obj)<sp/>{<sp/>this._wrapped<sp/>=<sp/>obj;<sp/>};</highlight></codeline>
<codeline lineno="947"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="948"><highlight class="stringliteral"><sp/><sp/>//<sp/>Expose<sp/>`wrapper.prototype`<sp/>as<sp/>`_.prototype`</highlight></codeline>
<codeline lineno="949"><highlight class="stringliteral"><sp/><sp/>_.prototype<sp/>=<sp/>wrapper.prototype;</highlight></codeline>
<codeline lineno="950"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="951"><highlight class="stringliteral"><sp/><sp/>//<sp/>Helper<sp/>function<sp/>to<sp/>continue<sp/>chaining<sp/>intermediate<sp/>results.</highlight></codeline>
<codeline lineno="952"><highlight class="stringliteral"><sp/><sp/>var<sp/>result<sp/>=<sp/>function(obj,<sp/>chain)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>chain<sp/>?<sp/>_(obj).chain()<sp/>:<sp/>obj;</highlight></codeline>
<codeline lineno="954"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="955"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="956"><highlight class="stringliteral"><sp/><sp/>//<sp/>A<sp/>method<sp/>to<sp/>easily<sp/>add<sp/>functions<sp/>to<sp/>the<sp/>OOP<sp/>wrapper.</highlight></codeline>
<codeline lineno="957"><highlight class="stringliteral"><sp/><sp/>var<sp/>addToWrapper<sp/>=<sp/>function(name,<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>wrapper.prototype[name]<sp/>=<sp/>function()<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>args<sp/>=<sp/>slice.call(arguments);</highlight></codeline>
<codeline lineno="960"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>unshift.call(args,<sp/>this._wrapped);</highlight></codeline>
<codeline lineno="961"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result(func.apply(_,<sp/>args),<sp/>this._chain);</highlight></codeline>
<codeline lineno="962"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="963"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="964"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="965"><highlight class="stringliteral"><sp/><sp/>//<sp/>Add<sp/>all<sp/>of<sp/>the<sp/>Underscore<sp/>functions<sp/>to<sp/>the<sp/>wrapper<sp/>object.</highlight></codeline>
<codeline lineno="966"><highlight class="stringliteral"><sp/><sp/>_.mixin(_);</highlight></codeline>
<codeline lineno="967"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="968"><highlight class="stringliteral"><sp/><sp/>//<sp/>Add<sp/>all<sp/>mutator<sp/>Array<sp/>functions<sp/>to<sp/>the<sp/>wrapper.</highlight></codeline>
<codeline lineno="969"><highlight class="stringliteral"><sp/><sp/>each([&apos;</highlight><highlight class="normal">pop</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">push</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">reverse</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">shift</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">sort</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">splice</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">unshift</highlight><highlight class="stringliteral">&apos;],<sp/>function(name)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>method<sp/>=<sp/>ArrayProto[name];</highlight></codeline>
<codeline lineno="971"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>wrapper.prototype[name]<sp/>=<sp/>function()<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>wrapped<sp/>=<sp/>this._wrapped;</highlight></codeline>
<codeline lineno="973"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>method.apply(wrapped,<sp/>arguments);</highlight></codeline>
<codeline lineno="974"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>length<sp/>=<sp/>wrapped.length;</highlight></codeline>
<codeline lineno="975"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((name<sp/>==<sp/>&apos;</highlight><highlight class="normal">shift</highlight><highlight class="stringliteral">&apos;<sp/>||<sp/>name<sp/>==<sp/>&apos;</highlight><highlight class="normal">splice</highlight><highlight class="stringliteral">&apos;)<sp/>&amp;&amp;<sp/>length<sp/>===<sp/>0)<sp/>delete<sp/>wrapped[0];</highlight></codeline>
<codeline lineno="976"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result(wrapped,<sp/>this._chain);</highlight></codeline>
<codeline lineno="977"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="978"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="979"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="980"><highlight class="stringliteral"><sp/><sp/>//<sp/>Add<sp/>all<sp/>accessor<sp/>Array<sp/>functions<sp/>to<sp/>the<sp/>wrapper.</highlight></codeline>
<codeline lineno="981"><highlight class="stringliteral"><sp/><sp/>each([&apos;</highlight><highlight class="normal">concat</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">join</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">slice</highlight><highlight class="stringliteral">&apos;],<sp/>function(name)<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>var<sp/>method<sp/>=<sp/>ArrayProto[name];</highlight></codeline>
<codeline lineno="983"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>wrapper.prototype[name]<sp/>=<sp/>function()<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result(method.apply(this._wrapped,<sp/>arguments),<sp/>this._chain);</highlight></codeline>
<codeline lineno="985"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="986"><highlight class="stringliteral"><sp/><sp/>});</highlight></codeline>
<codeline lineno="987"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="988"><highlight class="stringliteral"><sp/><sp/>//<sp/>Start<sp/>chaining<sp/>a<sp/>wrapped<sp/>Underscore<sp/>object.</highlight></codeline>
<codeline lineno="989"><highlight class="stringliteral"><sp/><sp/>wrapper.prototype.chain<sp/>=<sp/>function()<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>this._chain<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="991"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>this;</highlight></codeline>
<codeline lineno="992"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="993"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="994"><highlight class="stringliteral"><sp/><sp/>//<sp/>Extracts<sp/>the<sp/>result<sp/>from<sp/>a<sp/>wrapped<sp/>and<sp/>chained<sp/>object.</highlight></codeline>
<codeline lineno="995"><highlight class="stringliteral"><sp/><sp/>wrapper.prototype.value<sp/>=<sp/>function()<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>this._wrapped;</highlight></codeline>
<codeline lineno="997"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="998"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="999"><highlight class="stringliteral">}).call(this);</highlight></codeline>
    </programlisting>
    <location file="build/html/_static/underscore-1.3.1.js"/>
  </compounddef>
</doxygen>
